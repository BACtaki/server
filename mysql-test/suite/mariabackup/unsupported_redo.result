call mtr.add_suppression("InnoDB: New log files created");
call mtr.add_suppression("InnoDB: Operating system error number .* in a file operation");
call mtr.add_suppression("InnoDB: The error means the system cannot find the path specified");
call mtr.add_suppression("InnoDB: If you are installing InnoDB, remember that you must create directories yourself, InnoDB does not create them");
call mtr.add_suppression("InnoDB: Ignoring tablespace for `test`\\.`t1` because it could not be opened");
call mtr.add_suppression("InnoDB: Cannot open datafile for read-only: ");
call mtr.add_suppression("Table .* in the InnoDB data dictionary has tablespace id .*, but tablespace with that id or name does not exist");
CREATE TABLE t1(i INT PRIMARY KEY auto_increment, a int) ENGINE INNODB;
alter table t1 FORCE, algorithm=inplace;
# Fails during full backup
DROP TABLE t1;
CREATE TABLE t1(i INT PRIMARY KEY auto_increment, a int) ENGINE INNODB;
INSERT INTO t1(a) select 1 union select 2 union select 3;
# Create full backup , modify table, then fails during creation of
#		incremental/differential backup
alter table t1 force, algorithm=inplace;
drop table t1;
CREATE TABLE t1(i INT) ENGINE INNODB;
INSERT INTO t1 VALUES(1);
CREATE TABLE t2(i int) ENGINE INNODB;
ALTER TABLE t1 FORCE, ALGORITHM=INPLACE;
# Create partial backup (excluding table t1), Ignore the
# unsupported redo log for the table t1.
t2.frm
t2.ibd
# After partial restore operation, t1 files will be missing
# but t1 table information will be present in dictionary. It will
# restrict creating the table t1 in the future test. To avoid
# that, take the copy of t1 files and drop the table later.
# Prepare the full backup
# shutdown server
# remove datadir
# xtrabackup move back
# restart server
SHOW TABLES;
Tables_in_test
t2
DROP TABLE t2;
# Move the t1 files into data directory
DROP TABLE t1;
